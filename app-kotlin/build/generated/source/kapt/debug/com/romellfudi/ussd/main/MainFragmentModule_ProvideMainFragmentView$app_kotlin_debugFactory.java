// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.main;

import com.romellfudi.ussd.main.view.MainFragmentMVPView;
import com.romellfudi.ussd.main.view.MainFragmentView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainFragmentModule_ProvideMainFragmentView$app_kotlin_debugFactory implements Factory<MainFragmentMVPView> {
  private final MainFragmentModule module;

  private final Provider<MainFragmentView> viewProvider;

  public MainFragmentModule_ProvideMainFragmentView$app_kotlin_debugFactory(
      MainFragmentModule module, Provider<MainFragmentView> viewProvider) {
    this.module = module;
    this.viewProvider = viewProvider;
  }

  @Override
  public MainFragmentMVPView get() {
    return provideMainFragmentView$app_kotlin_debug(module, viewProvider.get());
  }

  public static MainFragmentModule_ProvideMainFragmentView$app_kotlin_debugFactory create(
      MainFragmentModule module, Provider<MainFragmentView> viewProvider) {
    return new MainFragmentModule_ProvideMainFragmentView$app_kotlin_debugFactory(module, viewProvider);
  }

  public static MainFragmentMVPView provideMainFragmentView$app_kotlin_debug(
      MainFragmentModule instance, MainFragmentView view) {
    return Preconditions.checkNotNull(instance.provideMainFragmentView$app_kotlin_debug(view), "Cannot return null from a non-@Nullable @Provides method");
  }
}
