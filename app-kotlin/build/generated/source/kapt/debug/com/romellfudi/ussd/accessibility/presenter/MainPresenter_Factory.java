// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.accessibility.presenter;

import com.romellfudi.ussd.accessibility.interactor.MainMVPInteractor;
import com.romellfudi.ussd.accessibility.view.MainMVPView;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainPresenter_Factory<V extends MainMVPView, I extends MainMVPInteractor> implements Factory<MainPresenter<V, I>> {
  private final Provider<I> interatorProvider;

  public MainPresenter_Factory(Provider<I> interatorProvider) {
    this.interatorProvider = interatorProvider;
  }

  @Override
  public MainPresenter<V, I> get() {
    return new MainPresenter<V, I>(interatorProvider.get());
  }

  public static <V extends MainMVPView, I extends MainMVPInteractor> MainPresenter_Factory<V, I> create(
      Provider<I> interatorProvider) {
    return new MainPresenter_Factory<V, I>(interatorProvider);
  }

  public static <V extends MainMVPView, I extends MainMVPInteractor> MainPresenter<V, I> newInstance(
      I interator) {
    return new MainPresenter<V, I>(interator);
  }
}
