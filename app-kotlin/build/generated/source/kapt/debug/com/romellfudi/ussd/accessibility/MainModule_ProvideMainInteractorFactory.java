// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.accessibility;

import com.romellfudi.ussd.accessibility.interactor.MainInteractor;
import com.romellfudi.ussd.accessibility.interactor.MainMVPInteractor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainModule_ProvideMainInteractorFactory implements Factory<MainMVPInteractor> {
  private final MainModule module;

  private final Provider<MainInteractor> mainInteractorProvider;

  public MainModule_ProvideMainInteractorFactory(MainModule module,
      Provider<MainInteractor> mainInteractorProvider) {
    this.module = module;
    this.mainInteractorProvider = mainInteractorProvider;
  }

  @Override
  public MainMVPInteractor get() {
    return provideMainInteractor(module, mainInteractorProvider.get());
  }

  public static MainModule_ProvideMainInteractorFactory create(MainModule module,
      Provider<MainInteractor> mainInteractorProvider) {
    return new MainModule_ProvideMainInteractorFactory(module, mainInteractorProvider);
  }

  public static MainMVPInteractor provideMainInteractor(MainModule instance,
      MainInteractor mainInteractor) {
    return Preconditions.checkNotNull(instance.provideMainInteractor(mainInteractor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
