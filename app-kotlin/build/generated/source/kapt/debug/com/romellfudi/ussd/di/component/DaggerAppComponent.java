// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.di.component;

import android.app.Application;
import android.content.Context;
import com.google.android.play.core.appupdate.AppUpdateManager;
import com.romellfudi.permission.PermissionService;
import com.romellfudi.ussd.App;
import com.romellfudi.ussd.App_MembersInjector;
import com.romellfudi.ussd.accessibility.MainModule;
import com.romellfudi.ussd.accessibility.MainModule_ProvideAppUpdateManager$app_kotlin_debugFactory;
import com.romellfudi.ussd.accessibility.view.MainActivity;
import com.romellfudi.ussd.accessibility.view.MainActivity_MembersInjector;
import com.romellfudi.ussd.di.ActivityFactory_BindMainActivity;
import com.romellfudi.ussd.di.AppModule;
import com.romellfudi.ussd.di.AppModule_ProvideContext$app_kotlin_debugFactory;
import com.romellfudi.ussd.main.MainFragmentModule;
import com.romellfudi.ussd.main.MainFragmentModule_ProvideMainFragmentInteractor$app_kotlin_debugFactory;
import com.romellfudi.ussd.main.MainFragmentModule_ProvideMainFragmentPresenter$app_kotlin_debugFactory;
import com.romellfudi.ussd.main.MainFragmentModule_ProvideMainFragmentView$app_kotlin_debugFactory;
import com.romellfudi.ussd.main.MainFragmentModule_ProvidePermissionServiceFactory;
import com.romellfudi.ussd.main.MainFragmentModule_ProvideUSSDApiFactory;
import com.romellfudi.ussd.main.MainFragmentProvider_ProvideMainFragmentView$app_kotlin_debug;
import com.romellfudi.ussd.main.interactor.MainFragmentInteractor;
import com.romellfudi.ussd.main.interactor.MainFragmentMVPInteractor;
import com.romellfudi.ussd.main.presenter.MainFragmentMVPPresenter;
import com.romellfudi.ussd.main.presenter.MainFragmentPresenter;
import com.romellfudi.ussd.main.presenter.MainFragmentPresenter_Factory;
import com.romellfudi.ussd.main.view.MainFragmentMVPView;
import com.romellfudi.ussd.main.view.MainFragmentView;
import com.romellfudi.ussd.main.view.MainFragmentView_MembersInjector;
import com.romellfudi.ussdlibrary.USSDApi;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityFactory_BindMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Application> contextProvider;

  private Provider<Context> provideContext$app_kotlin_debugProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application contextParam) {

    initialize(appModuleParam, contextParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application contextParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityFactory_BindMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityFactory_BindMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.contextProvider = InstanceFactory.create(contextParam);
    this.provideContext$app_kotlin_debugProvider = DoubleCheck.provider(AppModule_ProvideContext$app_kotlin_debugFactory.create(appModuleParam, contextProvider));
  }

  @Override
  public void inject(App app) {
    injectApp(app);}

  private App injectApp(App instance) {
    App_MembersInjector.injectActivityDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Application context) {
      Preconditions.checkNotNull(context);
      return new DaggerAppComponent(new AppModule(), context);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityFactory_BindMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityFactory_BindMainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(new MainModule(), arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityFactory_BindMainActivity.MainActivitySubcomponent {
    private final MainModule mainModule;

    private Provider<MainFragmentProvider_ProvideMainFragmentView$app_kotlin_debug.MainFragmentViewSubcomponent.Factory> mainFragmentViewSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainModule mainModuleParam, MainActivity arg0) {
      this.mainModule = mainModuleParam;
      initialize(mainModuleParam, arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(MainFragmentView.class, (Provider) mainFragmentViewSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    private AppUpdateManager getAppUpdateManager() {
      return MainModule_ProvideAppUpdateManager$app_kotlin_debugFactory.provideAppUpdateManager$app_kotlin_debug(mainModule, DaggerAppComponent.this.provideContext$app_kotlin_debugProvider.get());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainModule mainModuleParam, final MainActivity arg0) {
      this.mainFragmentViewSubcomponentFactoryProvider = new Provider<MainFragmentProvider_ProvideMainFragmentView$app_kotlin_debug.MainFragmentViewSubcomponent.Factory>() {
        @Override
        public MainFragmentProvider_ProvideMainFragmentView$app_kotlin_debug.MainFragmentViewSubcomponent.Factory get(
            ) {
          return new MainFragmentViewSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectAppUpdateManager(instance, getAppUpdateManager());
      return instance;
    }

    private final class MainFragmentViewSubcomponentFactory implements MainFragmentProvider_ProvideMainFragmentView$app_kotlin_debug.MainFragmentViewSubcomponent.Factory {
      @Override
      public MainFragmentProvider_ProvideMainFragmentView$app_kotlin_debug.MainFragmentViewSubcomponent create(
          MainFragmentView arg0) {
        Preconditions.checkNotNull(arg0);
        return new MainFragmentViewSubcomponentImpl(new MainFragmentModule(), arg0);
      }
    }

    private final class MainFragmentViewSubcomponentImpl implements MainFragmentProvider_ProvideMainFragmentView$app_kotlin_debug.MainFragmentViewSubcomponent {
      private final MainFragmentView arg0;

      private final MainFragmentModule mainFragmentModule;

      private MainFragmentViewSubcomponentImpl(MainFragmentModule mainFragmentModuleParam,
          MainFragmentView arg0Param) {
        this.arg0 = arg0Param;
        this.mainFragmentModule = mainFragmentModuleParam;
      }

      private USSDApi getUSSDApi() {
        return MainFragmentModule_ProvideUSSDApiFactory.provideUSSDApi(mainFragmentModule, arg0);}

      private PermissionService getPermissionService() {
        return MainFragmentModule_ProvidePermissionServiceFactory.providePermissionService(mainFragmentModule, arg0);}

      private MainFragmentMVPView getMainFragmentMVPView() {
        return MainFragmentModule_ProvideMainFragmentView$app_kotlin_debugFactory.provideMainFragmentView$app_kotlin_debug(mainFragmentModule, arg0);}

      private MainFragmentInteractor getMainFragmentInteractor() {
        return new MainFragmentInteractor(DaggerAppComponent.this.provideContext$app_kotlin_debugProvider.get());}

      private MainFragmentMVPInteractor getMainFragmentMVPInteractor() {
        return MainFragmentModule_ProvideMainFragmentInteractor$app_kotlin_debugFactory.provideMainFragmentInteractor$app_kotlin_debug(mainFragmentModule, getMainFragmentInteractor());}

      private MainFragmentPresenter<MainFragmentMVPView, MainFragmentMVPInteractor> getMainFragmentPresenterOfMainFragmentMVPViewAndMainFragmentMVPInteractor(
          ) {
        return MainFragmentPresenter_Factory.newInstance(getMainFragmentMVPView(), getMainFragmentMVPInteractor());}

      private MainFragmentMVPPresenter<MainFragmentMVPView, MainFragmentMVPInteractor> getMainFragmentMVPPresenterOfMainFragmentMVPViewAndMainFragmentMVPInteractor(
          ) {
        return MainFragmentModule_ProvideMainFragmentPresenter$app_kotlin_debugFactory.provideMainFragmentPresenter$app_kotlin_debug(mainFragmentModule, getMainFragmentPresenterOfMainFragmentMVPViewAndMainFragmentMVPInteractor());}

      @Override
      public void inject(MainFragmentView arg0) {
        injectMainFragmentView(arg0);}

      private MainFragmentView injectMainFragmentView(MainFragmentView instance) {
        MainFragmentView_MembersInjector.injectUssdApi(instance, getUSSDApi());
        MainFragmentView_MembersInjector.injectPermissionService(instance, getPermissionService());
        MainFragmentView_MembersInjector.injectMainFragmentMVPPresenter(instance, getMainFragmentMVPPresenterOfMainFragmentMVPViewAndMainFragmentMVPInteractor());
        return instance;
      }
    }
  }
}
