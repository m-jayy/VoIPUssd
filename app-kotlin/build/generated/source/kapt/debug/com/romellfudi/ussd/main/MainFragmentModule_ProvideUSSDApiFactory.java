// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.main;

import com.romellfudi.ussd.main.view.MainFragmentView;
import com.romellfudi.ussdlibrary.USSDApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainFragmentModule_ProvideUSSDApiFactory implements Factory<USSDApi> {
  private final MainFragmentModule module;

  private final Provider<MainFragmentView> fragmentProvider;

  public MainFragmentModule_ProvideUSSDApiFactory(MainFragmentModule module,
      Provider<MainFragmentView> fragmentProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public USSDApi get() {
    return provideUSSDApi(module, fragmentProvider.get());
  }

  public static MainFragmentModule_ProvideUSSDApiFactory create(MainFragmentModule module,
      Provider<MainFragmentView> fragmentProvider) {
    return new MainFragmentModule_ProvideUSSDApiFactory(module, fragmentProvider);
  }

  public static USSDApi provideUSSDApi(MainFragmentModule instance, MainFragmentView fragment) {
    return Preconditions.checkNotNull(instance.provideUSSDApi(fragment), "Cannot return null from a non-@Nullable @Provides method");
  }
}
