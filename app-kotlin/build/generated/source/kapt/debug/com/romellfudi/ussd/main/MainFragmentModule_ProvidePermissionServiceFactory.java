// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.main;

import com.romellfudi.permission.PermissionService;
import com.romellfudi.ussd.main.view.MainFragmentView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainFragmentModule_ProvidePermissionServiceFactory implements Factory<PermissionService> {
  private final MainFragmentModule module;

  private final Provider<MainFragmentView> fragmentProvider;

  public MainFragmentModule_ProvidePermissionServiceFactory(MainFragmentModule module,
      Provider<MainFragmentView> fragmentProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public PermissionService get() {
    return providePermissionService(module, fragmentProvider.get());
  }

  public static MainFragmentModule_ProvidePermissionServiceFactory create(MainFragmentModule module,
      Provider<MainFragmentView> fragmentProvider) {
    return new MainFragmentModule_ProvidePermissionServiceFactory(module, fragmentProvider);
  }

  public static PermissionService providePermissionService(MainFragmentModule instance,
      MainFragmentView fragment) {
    return Preconditions.checkNotNull(instance.providePermissionService(fragment), "Cannot return null from a non-@Nullable @Provides method");
  }
}
