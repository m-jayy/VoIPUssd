// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.main;

import com.romellfudi.ussd.main.interactor.MainFragmentMVPInteractor;
import com.romellfudi.ussd.main.presenter.MainFragmentMVPPresenter;
import com.romellfudi.ussd.main.presenter.MainFragmentPresenter;
import com.romellfudi.ussd.main.view.MainFragmentMVPView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainFragmentModule_ProvideMainFragmentPresenter$app_kotlin_debugFactory implements Factory<MainFragmentMVPPresenter<MainFragmentMVPView, MainFragmentMVPInteractor>> {
  private final MainFragmentModule module;

  private final Provider<MainFragmentPresenter<MainFragmentMVPView, MainFragmentMVPInteractor>> presenterProvider;

  public MainFragmentModule_ProvideMainFragmentPresenter$app_kotlin_debugFactory(
      MainFragmentModule module,
      Provider<MainFragmentPresenter<MainFragmentMVPView, MainFragmentMVPInteractor>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public MainFragmentMVPPresenter<MainFragmentMVPView, MainFragmentMVPInteractor> get() {
    return provideMainFragmentPresenter$app_kotlin_debug(module, presenterProvider.get());
  }

  public static MainFragmentModule_ProvideMainFragmentPresenter$app_kotlin_debugFactory create(
      MainFragmentModule module,
      Provider<MainFragmentPresenter<MainFragmentMVPView, MainFragmentMVPInteractor>> presenterProvider) {
    return new MainFragmentModule_ProvideMainFragmentPresenter$app_kotlin_debugFactory(module, presenterProvider);
  }

  public static MainFragmentMVPPresenter<MainFragmentMVPView, MainFragmentMVPInteractor> provideMainFragmentPresenter$app_kotlin_debug(
      MainFragmentModule instance,
      MainFragmentPresenter<MainFragmentMVPView, MainFragmentMVPInteractor> presenter) {
    return Preconditions.checkNotNull(instance.provideMainFragmentPresenter$app_kotlin_debug(presenter), "Cannot return null from a non-@Nullable @Provides method");
  }
}
