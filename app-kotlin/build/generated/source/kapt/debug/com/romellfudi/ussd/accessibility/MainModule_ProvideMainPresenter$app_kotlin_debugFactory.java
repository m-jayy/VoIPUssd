// Generated by Dagger (https://dagger.dev).
package com.romellfudi.ussd.accessibility;

import com.romellfudi.ussd.accessibility.interactor.MainMVPInteractor;
import com.romellfudi.ussd.accessibility.presenter.MainMVPPresenter;
import com.romellfudi.ussd.accessibility.presenter.MainPresenter;
import com.romellfudi.ussd.accessibility.view.MainMVPView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainModule_ProvideMainPresenter$app_kotlin_debugFactory implements Factory<MainMVPPresenter<MainMVPView, MainMVPInteractor>> {
  private final MainModule module;

  private final Provider<MainPresenter<MainMVPView, MainMVPInteractor>> mainPresenterProvider;

  public MainModule_ProvideMainPresenter$app_kotlin_debugFactory(MainModule module,
      Provider<MainPresenter<MainMVPView, MainMVPInteractor>> mainPresenterProvider) {
    this.module = module;
    this.mainPresenterProvider = mainPresenterProvider;
  }

  @Override
  public MainMVPPresenter<MainMVPView, MainMVPInteractor> get() {
    return provideMainPresenter$app_kotlin_debug(module, mainPresenterProvider.get());
  }

  public static MainModule_ProvideMainPresenter$app_kotlin_debugFactory create(MainModule module,
      Provider<MainPresenter<MainMVPView, MainMVPInteractor>> mainPresenterProvider) {
    return new MainModule_ProvideMainPresenter$app_kotlin_debugFactory(module, mainPresenterProvider);
  }

  public static MainMVPPresenter<MainMVPView, MainMVPInteractor> provideMainPresenter$app_kotlin_debug(
      MainModule instance, MainPresenter<MainMVPView, MainMVPInteractor> mainPresenter) {
    return Preconditions.checkNotNull(instance.provideMainPresenter$app_kotlin_debug(mainPresenter), "Cannot return null from a non-@Nullable @Provides method");
  }
}
